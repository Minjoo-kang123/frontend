하나의 프로그램은 적어도 하나의 스레드를 가지며 이를 주 스레드라고 한다.
여러개의 스레드가 있을 경우 각 스레드들은 동시에 cpu를 차지하는 것이 아닌 cpu의 시간을 쪼개서 사용한다.

A스레드가 cpu에서 쫒겨나고 B스레드가 cpu를 차지하는 것을 

* 동기화 예시
int a
    - A스레드는 a변수에 값 10을 넣어놓고 이때 쫒겨남
    - B스레드는 a 값을 출력하고 100으로 바꿈 이때 쫒겨난다
    - 다시 돌아온 A는 a의 값을 100으로 인식하게 된다.

--------------

누가 쓰고있는 동안 남이 못들어가게 하는 수단들이 동기화이다.
동기화 문제를 해결하기 위한 수단으로 크리티컬컬렛견, 뮤텍스, 세마포어, 이벤트 등이 있다.

전체적인 응답시간은 길어지나, 중간중간 사용자에게 응답을 보내 때문에 일을 빨리 하는 것처럼 보인다.

파이썬이 멀티스레드를 지원한다.
자바 멀티스레드 => 자원을 많이 사용함
노드는 비동기방식을 채택하고 있다

소켓 
    - 자료구조, 클래스, 메신저를 만들기 위해선 소켓을 사용
    - 소켓은 os가 기본적으로 제공하는 자료구조

개발자는 하드웨어에 대해 자세히 알아야한다.
프린터와 관련 프로그램을 개발하기 위해선 이의 작동원리에 대해 공부해야하며
화면에 그래픽적 요소를 출력(이미지 그리기)를 하기 위해선 그래픽카드에 대해 공부해야한다.

하드웨어 <- os가 처리 <- os와 주고 받는다
실제 장비 <- os 라이브러리(소켓) <- os한테 소켓을 받아서 작성
프린터/모니터 <- os라이브러리(gdi)
\
os의 원래 목적은 사용자 프로그램으로 프로세스를 만드는 것이다

웹소켓 등잘 +> html 안에 소켓이 포함됨 => 자바스크립트로 처리 > 비동기

자바스크립트 - 멀티스레드 지원하지 않음, 비동기처리

멀티스레드를 사용할지 비동기를 사용할지는 선택하는 사람의 마음

스레드 풀 - 스레드를 미리 맞게 만들어 놓고 돌려씀

멀티스레드 특징 -   시스템 자원을 많이 사용하는 것이 단점
                    동일한 데이터 공간을 사용하며 동기화 문제 발생
                    단, 멀티스레드 중 하나가 죽어도 다른 스레드끼리 
                    일을 수행할 수 있어 안정적이다.

비동기 특징 - 프로그램 내에서는 단일 스레드를 사용
            동기화 문제가 발생하지 않지만 하나의 스레드가 죽으면
            프로그램 전체가 죽는다.
            그래서 자동 재시작 등의 조치가 필요하다.
            시스템 자원을 적게 사용한다.